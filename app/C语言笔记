数组指针
int array2[2][3] = {{1,2,3},{4,5,6}}
int (*array_p2)[3] = array2
    ---> 指向一个三个元素的数组
    ---> 怎么取出55这个值 (array_p2 + 1 = array_p2[1])
        array_p2 + 1 = 指向44的地址 解引用拿指 = *(array_p2 + 1) = 44
        *(*(array_p2 + 1) + 1) = 55


指针数组
int *p_array[3]



const 不可变的，修饰谁，谁就不可变（从右往左看）
char tmp[] = "Hello"

// p2指针指向一个不可变的char
【1】 const char *p2 = tmp
【2】 char const *p3 --> 和 【1】 是一样的，不能修饰[*]号

// p4不可变，
    所以p4[0] = "a" 是可以的，因为修改是p4指向的地址的值
    而p4 = "111" 是不可以的，因为这修改的是 p4 指向的地址，但是p4 不可变
【3】 char *const p4

// 指针和类型都被修饰了，都不可变
【4】 const char * const p5
【5】 char const * const p6



多级指针 = 指针的指针
int *p7
int **p8 = &p7


函数：要在使用之前声明
1.传值
2.传引用 = 传地址



函数指针：指向函数的指针（做回调）
void say(void (*p)(char*), chat *msg){
    p(msg)
}
    ----> void (*p)(char*) 函数
    ----> (*p) p变量用来表示这个函数
    ----> (char*) 参数列表

void print(char* content){
}

// 直接理解为 变量(*p) = print ,所以 void,和参数都要一致，跟kotlin方法中传表达式差不多一个意思
void (*p)(char*) = print
say(p,"hellow")

预处理器
























































































































































