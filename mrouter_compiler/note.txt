//
Class（原始/基本类型，也叫raw type）：不仅仅包含我们平常所指的类、枚举、数组、注解，还包括基本类型int、float等等
TypeVariable（类型变量）：比如List<T>中的T等
WildcardType（ 泛型表达式类型）：例如List< ? extends Number>这种
ParameterizedType（参数化类型）：就是我们平常所用到的泛型List、Map（注意和TypeVariable的区别）
GenericArrayType（数组类型）：并不是我们工作中所使用的数组String[] 、byte[]（这种都属于Class），而是带有泛型的数组，即T[] 泛型数组




// Group模板
 public class ARouter$$Group$$app implements ARouterGroup {
   @Override
   public Map<String, Class<? extends ARouterPath>> getGroupMap() {
     Map<String, Class<? extends ARouterPath>> groupMap = new HashMap<>();
     groupMap.put("app", ARouter$$Path$$app.class);
     return groupMap;
   }
 }

// Path模板
 public class ARouter$$Path$$app implements ARouterPath {
   @Override
   public Map<String, RouterBean> getPathMap() {
     Map<String, RouterBean> pathMap = new HashMap<>();
     pathMap.put("/app/MainActivity", RouterBean.create(RouterBean.TypeEnum.ACTIVITY, MainActivity.class, "/app/MainActivity", "app"));
     return pathMap;
   }
 }

// 使用路由的跳转方法
  ARouter$$Group$$personal group$$personal = new ARouter$$Group$$personal(); // Group.class对象
  Map<String, Class<? extends ARouterPath>> groupMap = group$$personal.getGroupMap(); // 获取Map
  Class<? extends ARouterPath> myClass = groupMap.get("personal");  //  获取path.class
  try {
     ARouter$$Path$$personal path = (ARouter$$Path$$personal) myClass.newInstance(); // myClass.newInstance() --> path.class对象
     Map<String, RouterBean> pathMap = path.getPathMap();   // 获取Map
     RouterBean bean = pathMap.get("/personal/Personal_MainActivity");
     if (bean != null) {
          Intent intent = new Intent(this, bean.getMyClass());
          startActivity(intent);
     }

  } catch (Exception e) {
     e.printStackTrace();
  }

  分析：
  @MRouter(path = "app/MainActivity")
  Group.get("app")  ----> 获取到Group = "app" 的path.class
  path.class 里面有 ---> Map<String, RouterBean> pathMap
  pathMap.get("path") ---> RouterBean
  RouterBean.getClass() ---> 获取使用了@MRouter的activity
  再用intent跳转

// path的javaPoet


 // JavaPoet 方法
            /*public class JavaPoet extends AppCompatActivity {
                public void JavaPoetActivity(Bundle savedInstanceState) {
                    System.out.println("liyihuanx");
                }
            }*/

            // 方法： methodBuilder(方法名)
            //          .addModifiers(方法类型)
            //          .returns(返回类型)
            //          .addParameter(参数)
            //          .addStatement(方法语句)
            //          .build();
            MethodSpec methodSpec = MethodSpec.methodBuilder("JavaPoetActivity")
                    .addModifiers(Modifier.PUBLIC)
                    .addParameter(ClassName.get("android.os", "Bundle"), "savedInstanceState")
                    .addStatement("System.out.println($S)","liyihuanx")
                    .returns(void.class)
                    .build();

            // 类: classBuilder(类名)
            //        .addModifiers(方法类型)
            //        .superclass(继承的类)
            //        .addMethod(添加写好的方法)
            TypeSpec clazz = TypeSpec.classBuilder("JavaPoet")
                    .addMethod(methodSpec)
                    .superclass(ClassName.get("androidx.appcompat.app", "AppCompatActivity"))
                    .addModifiers(Modifier.PUBLIC)
                    .build();

            // 包：
            JavaFile javaPort = JavaFile.builder("com.example.myjavapoet123", clazz).build();

            try {
                javaPort.writeTo(filer);
            } catch (IOException e) {
                e.printStackTrace();
            }